AUTOGENERATED. DO NOT EDIT.


--bench--

Usage: bench [-t] [-s] [<output>]

Performs a series of micro-benchmarks.

-T	benchmark with varying number of threads
-S	benchmark with varying problem size
-h	help


--bitmask--

Usage: bitmask -b <bitmask> | <dim1> ... <dimN>

Compute bitmask for specified dimensions.


--bpsense--

Usage: bpsense [-r l2lambda] [-c] [-e eps] [-u rho] <kspace> <sensitivities> <output>

Perform basis pursuit denoising for SENSE/ESPIRiT reconstruction:
min_x ||T x||_1 + lambda/2 ||x||_2^2 subject to: ||y - Ax||_2 <= eps

-e eps	data consistency error
-r lambda	l2 regularization parameter
-u rho	ADMM penalty parameter
-c	real-value constraint
-t	use TV norm
-T	compare to truth image


--caldir--

Usage: caldir cal_size <input> <output>

Estimates coil sensitivities from the k-space center using
a direct method (McKenzie et al.). The size of the fully-sampled
calibration region is automatically determined but limited by
{cal_size} (e.g. in the readout direction).


--calmat--

Usage: calmat [-k kernel_size] [-r cal_size] <kspace> <calibration matrix>

Compute calibration matrix.

-k ksize	kernel size
-r cal_size	Limits the size of the calibration region.


--cc--

Usage: cc [-A] [-r cal_size] [-P num_coeffs] <kspace> <coeff>|<proj_kspace>

Performs coil compression.

-P N	perform compression to N virtual channels
-r S	size of calibration region
-A	use all data to compute coefficients
-S|G|E	type: SVD, Geometric, ESPIRiT
-h	help


--cdf97--

Usage: cdf97 [-i] bitmask <input> <output>

Perform a wavelet (cdf97) transform.

-i	inverse
-h	help


--circshift--

Usage: circshift dim shift <input> <output>

Perform circular shift along {dim} by {shift} elements.


--conj--

Usage: conj <input> <output>

Compute complex conjugate.


--conv--

Usage: conv bitmask <input> <kernel> <output>

Performs a convolution along selected dimensions.

-h	help


--cpyphs--

Usage: cpyphs <input> <output

Copy phase from <input> to <output>.


--creal--

Usage: creal <input> <output>

Real value.


--crop--

Usage: crop dimension size <input> <output>

Extracts a sub-array corresponding to the central part of {size} along {dimension}


--ecalib--

Usage: ecalib [-n num. s.values] [-t eigenv. threshold] [-c crop_value] [-k kernel_size] [-r cal_size] [-m maps] <kspace> <sensitivites> [<ev-maps>]

Estimate coil sensitivities using ESPIRiT calibration.
Optionally outputs the eigenvalue maps.

-t threshold	This determined the size of the null-space.
-c crop_value	Crop the sensitivities if the eigenvalue is smaller than {crop_value}.
-k ksize	kernel size
-r cal_size	Limits the size of the calibration region.
-m maps		Number of maps to compute.
-I		intensity correction
-1		perform only first part of the calibration


--ecaltwo--

Usage: ecaltwo [-c crop] [-m maps] x y z <input> <sensitivities> [<ev_maps>]

Second part of ESPIRiT calibration.
Optionally outputs the eigenvalue maps.

-c crop_value	Crop the sensitivities if the eigenvalue is smaller than {crop_value}.
-m maps		Number of maps to compute.


--extract--

Usage: extract dimension start end <input> <output>

Extracts a sub-array along {dim} from index {start} to {end}.


--fakeksp--

Usage: fakeksp [-h] [-r] <image> <kspace> <sens> <output>

Recreate k-space from image and sensitivities.

-r replace measured samples with original values


--fft--

Usage: fft [-u] [-i] bitmask <input> <output>

Performs a fast Fourier transform (FFT) along selected dimensions.

-u	unitary
-i	inverse
-h	help


--fftmod--

Usage: fftmod bitmask <input> <output>

Apply 1 -1 modulation along dimensions selected by the {bitmask}.


--fftshift--

Usage: fftshift bitmask <input> <output>

Apply fftshift along dimensions selected by the {bitmask}.


--flip--

Usage: flip bitmask <input> <output>

Flip (reverse) dimensions specified by the {bitmask}.


--fmac--

Usage: fmac [-A] [-C] [-s bitmask] <input1> <input2> <output>

Multiply and accumulate.

-A	add to existing output (instead of overwriting)
-C	conjugate input2
-s	squash selected dimensions


--homodyne--

Usage: homodyne dim fraction <input> <output>

Perform homodyne reconstruction along dimension dim.


--itsense--

Usage: itsense alpha <sensitivities> <kspace> <pattern> <image>

A simplified implementation of iterative sense reconstruction
with l2-regularization.


--join--

Usage: join dimension <input1> ... <inputn> <output>
	 Example 1: join 0 slice_001 slice_002 slice_003 full_data

	 Example 2: join 0 `seq -f "slice_%03g" 0 255` full_data


Join input files along {dimensions}. All other dimensions must have the same size.


--nlinv--

Usage: nlinv [-l1/-l2] [-i iterations] <kspace> <output> [<sensitivities>]

Jointly estimate image and sensitivities with nonlinear
inversion using {iter} iteration steps. Optionally outputs
the sensitivities.


--noise--

Usage: noise [-n var] [-r] <input> <output>

Add noise with selected variance to input.
	-n	variance	DEFAULT: 1.0
	-r	real-valued input
	-h	help


--normalize--

Usage: normalize flags <input> <output>

Normalize along selected dimensions.


--nrmse--

Usage: nrmse [-h] <reference> <input>

Output normalized root mean square error (NRMSE),
i.e. norm(input - ref) / norm(ref) 

-t	test
-h	help


--nufft--

Usage: nufft <traj> <input> <output>

Perform non-uniform Fast Fourier Transform.

-a	adjoint
-i	inverse
-d x:y:z 	dimensions
-t	toeplitz
-l lambda	l2 regularization
-h	help


--ones--

Usage: ones dims dim1 ... dimn name

Create an array filled with ones with {dims} dimensions of size {dim1} to {dimn}.


--pattern--

Usage: pattern <kspace> <pattern>

Compute sampling pattern from kspace


--phantom--

Usage: phantom [-k | -s nc] [-t trajectory] <output>

Image and k-space domain phantoms.

-s nc	nc sensitivities
-k	k-space
-h	help


--pics--

Usage: pics [-l1/-l2] [-r lambda] [-t <trajectory>] <kspace> <sensitivities> <output>

Parallel-imaging compressed-sensing reconstruction.

-l1/-l2		toggle l1-wavelet or l2 regularization.
-r lambda	regularization parameter
-R <T>:A:B:C	generalized regularization options (-Rh for help)
-c		real-value constraint
-s step		iteration stepsize
-i maxiter	number of iterations
-t trajectory	k-space trajectory


--pocsense--

Usage: pocsense [-l1/-l2] [-r lambda] <kspace> <sensitivities> <output>

Perform POCSENSE reconstruction.
-l1/-l2	toggle l1-wavelet or l2 regularization.
-r alpha	regularization parameter


--poisson--

Usage: poisson [-Y/Z dim] [-y/z acc] [-v] [-e] [-C center] <outfile>

Computes Poisson-disc sampling pattern.

-Y	size dimension 1 (phase 1)
-Z	size dimension 2 (phase 2)
-y	acceleration (dim 1)
-z	acceleration (dim 2)
-C	size of calibration region
-v	variable density
-e	elliptical scanning
-h	help


--relnorm--

Usage: relnorm [-h] <input1> <input2>
Compute relative l2 norm of two images: norm(x1 - x2) / norm(x2) 
	-h	help


--repmat--

Usage: repmat dimension repetitions <input> <output>

Repeat input array multiple times along a certain dimension.


--reshape--

Usage: reshape flags dim1 ... dimN <input> <output>

Reshape selected dimensions.




--resize--

Usage: resize [-c] dim1 size1 ... dimn sizen <input> <output>

Resizes an array along dimensions to sizes by truncating or zero-padding.

-c	center


--rof--

Usage: rof <lambda> <flags> <input> <output>

Perform total variation denoising along dims <flags>.


--rsense--

Usage: rsense [-l1/-l2] [-r lambda] [-c] <kspace> <sensitivities> <output>

Perform iterative SENSE/ESPIRiT reconstruction. The read
(0th) dimension is Fourier transformed and each section
perpendicular to this dimension is reconstructed separately.

-l1/-l2	toggle l1-wavelet or l2 regularization.
-r lambda	regularization parameter
-c	real-value constraint


--rss--

Usage: rss bitmask <input> <output>

Calculates root of sum of squares along selected dimensions.


--sake--

Usage: sake [-i iterations] [-s rel. subspace] <kspace> <output>

Use SAKE algorithm to recover a full k-space from undersampled
data using low-rank matrix completion.

-i	number of iterations
-s	rel. size of the signal subspace


--saxpy--

Usage: saxpy scale <input1> <input2> <output>

Multiply input1 with scale factor and add input2.


--scale--

Usage: scale factor <input> <output>

Scale array by {factor}. The scale factor can be a complex number.


--sdot--

Usage: sdot [-h] <input1> <input2>

Compute dot product along selected dimensions.

-h	help


--show--

Usage: show <input>


--slice--

Usage: slice dimension position <input> <output>

Extracts a slice from {position} along {dimension}.


--spow--

Usage: spow exponent <input> <output>

Raise array to the power of {exponent}. The exponent can be a complex number.


--svd--

Usage svd: [-e] <input> <U> <S> <VH>

Compute singular-value-decomposition (SVD).


--threshold--

Usage: threshold [-j bitmask] lambda <input> <output>

Perform softthresholding with parameter lambda.

-j bitmask	joint thresholding
-h	help


--toimg--

Usage: toimg [-h] <input> <output_prefix>

-h	help

Create magnitude images as png or proto-dicom.
The first two non-singleton dimensions will
be used for the image, and the other dimensions
will be looped over.


--traj--

Usage: traj [-h] [-r] <output>

Computes k-space trajectories.

-x x	readout samples
-y y	phase encoding lines
-a a	acceleration
-t t	turns
-r	radial
-G	golden-ratio sampling
-D	double base angle
-h	help


--transpose--

Usage: transpose dim1 dim2 <input> <output>

Transpose dimensions {dim1} and {dim2}.


--twixread--

Usage: twixread [...] [-a A] <dat file> <output>

Read data from Siemens twix (.dat) files.

-x X	number of samples (read-out)
-y Y	phase encoding steps
-z Z	partition encoding steps
-s S	number of slices
-v V	number of averages
-c C	number of channels
-n N	number of repetitions
-a A	total number of ADCs
-A	automatic (guess dimensions)
-L	use linectr offset
-P	use partctr offset
-h	help


--version--

Usage: version [-h]

Print BART version. The version string is of the form
TAG or TAG-COMMITS-SHA as produced by 'git describe'. It
specifies the last release (TAG), and (if git is used)
the number of commits (COMMITS) since this release and
the abbreviated hash of the last commit (SHA). If there
are local changes '-dirty' is added at the end.

-h	help


--walsh--

Usage: walsh [-r cal. size] [-b block size] <input> <output>

Estimate coil sensitivities using walsh method (use with ecaltwo).

-r cal_size	Limits the size of the calibration region.
-b block_size	Block size.


--wave--

Usage: wave [-r lambda]  <kspace> <sensitivities> <wave> <output>

Perform iterative wavecaipi reconstruction.

-a adjoint
-i max. iterations
-r lambda	regularization parameter
-l use L1 penalty


--zeros--

Usage: zeros dims dim1 ... dimn name

Create a zero-filled array with {dims} dimensions of size {dim1} to {dimn}.
